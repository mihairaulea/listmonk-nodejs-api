/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Listmonk);
  }
}(this, function(expect, Listmonk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Listmonk.SettingsData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SettingsData', function() {
    it('should create an instance of SettingsData', function() {
      // uncomment below and update the code to test SettingsData
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be.a(Listmonk.SettingsData);
    });

    it('should have the property appSiteName (base name: "app.site_name")', function() {
      // uncomment below and update the code to test the property appSiteName
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appRootUrl (base name: "app.root_url")', function() {
      // uncomment below and update the code to test the property appRootUrl
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appLogoUrl (base name: "app.logo_url")', function() {
      // uncomment below and update the code to test the property appLogoUrl
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appFaviconUrl (base name: "app.favicon_url")', function() {
      // uncomment below and update the code to test the property appFaviconUrl
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appFromEmail (base name: "app.from_email")', function() {
      // uncomment below and update the code to test the property appFromEmail
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appNotifyEmails (base name: "app.notify_emails")', function() {
      // uncomment below and update the code to test the property appNotifyEmails
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appEnablePublicSubscriptionPage (base name: "app.enable_public_subscription_page")', function() {
      // uncomment below and update the code to test the property appEnablePublicSubscriptionPage
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appEnablePublicArchive (base name: "app.enable_public_archive")', function() {
      // uncomment below and update the code to test the property appEnablePublicArchive
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appSendOptinConfirmation (base name: "app.send_optin_confirmation")', function() {
      // uncomment below and update the code to test the property appSendOptinConfirmation
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appCheckUpdates (base name: "app.check_updates")', function() {
      // uncomment below and update the code to test the property appCheckUpdates
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appLang (base name: "app.lang")', function() {
      // uncomment below and update the code to test the property appLang
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appBatchSize (base name: "app.batch_size")', function() {
      // uncomment below and update the code to test the property appBatchSize
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appConcurrency (base name: "app.concurrency")', function() {
      // uncomment below and update the code to test the property appConcurrency
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appMaxSendErrors (base name: "app.max_send_errors")', function() {
      // uncomment below and update the code to test the property appMaxSendErrors
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appMessageRate (base name: "app.message_rate")', function() {
      // uncomment below and update the code to test the property appMessageRate
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appMessageSlidingWindow (base name: "app.message_sliding_window")', function() {
      // uncomment below and update the code to test the property appMessageSlidingWindow
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appMessageSlidingWindowDuration (base name: "app.message_sliding_window_duration")', function() {
      // uncomment below and update the code to test the property appMessageSlidingWindowDuration
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appMessageSlidingWindowRate (base name: "app.message_sliding_window_rate")', function() {
      // uncomment below and update the code to test the property appMessageSlidingWindowRate
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property privacyIndividualTracking (base name: "privacy.individual_tracking")', function() {
      // uncomment below and update the code to test the property privacyIndividualTracking
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property privacyUnsubscribeHeader (base name: "privacy.unsubscribe_header")', function() {
      // uncomment below and update the code to test the property privacyUnsubscribeHeader
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property privacyAllowBlocklist (base name: "privacy.allow_blocklist")', function() {
      // uncomment below and update the code to test the property privacyAllowBlocklist
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property privacyAllowPreferences (base name: "privacy.allow_preferences")', function() {
      // uncomment below and update the code to test the property privacyAllowPreferences
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property privacyAllowExport (base name: "privacy.allow_export")', function() {
      // uncomment below and update the code to test the property privacyAllowExport
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property privacyAllowWipe (base name: "privacy.allow_wipe")', function() {
      // uncomment below and update the code to test the property privacyAllowWipe
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property privacyExportable (base name: "privacy.exportable")', function() {
      // uncomment below and update the code to test the property privacyExportable
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property privacyDomainBlocklist (base name: "privacy.domain_blocklist")', function() {
      // uncomment below and update the code to test the property privacyDomainBlocklist
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadProvider (base name: "upload.provider")', function() {
      // uncomment below and update the code to test the property uploadProvider
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadFilesystemUploadPath (base name: "upload.filesystem.upload_path")', function() {
      // uncomment below and update the code to test the property uploadFilesystemUploadPath
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadFilesystemUploadUri (base name: "upload.filesystem.upload_uri")', function() {
      // uncomment below and update the code to test the property uploadFilesystemUploadUri
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadS3Url (base name: "upload.s3.url")', function() {
      // uncomment below and update the code to test the property uploadS3Url
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadS3PublicUrl (base name: "upload.s3.public_url")', function() {
      // uncomment below and update the code to test the property uploadS3PublicUrl
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadS3AwsAccessKeyId (base name: "upload.s3.aws_access_key_id")', function() {
      // uncomment below and update the code to test the property uploadS3AwsAccessKeyId
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadS3AwsDefaultRegion (base name: "upload.s3.aws_default_region")', function() {
      // uncomment below and update the code to test the property uploadS3AwsDefaultRegion
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadS3Bucket (base name: "upload.s3.bucket")', function() {
      // uncomment below and update the code to test the property uploadS3Bucket
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadS3BucketDomain (base name: "upload.s3.bucket_domain")', function() {
      // uncomment below and update the code to test the property uploadS3BucketDomain
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadS3BucketPath (base name: "upload.s3.bucket_path")', function() {
      // uncomment below and update the code to test the property uploadS3BucketPath
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadS3BucketType (base name: "upload.s3.bucket_type")', function() {
      // uncomment below and update the code to test the property uploadS3BucketType
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property uploadS3Expiry (base name: "upload.s3.expiry")', function() {
      // uncomment below and update the code to test the property uploadS3Expiry
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property smtp (base name: "smtp")', function() {
      // uncomment below and update the code to test the property smtp
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property messengers (base name: "messengers")', function() {
      // uncomment below and update the code to test the property messengers
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property bounceEnabled (base name: "bounce.enabled")', function() {
      // uncomment below and update the code to test the property bounceEnabled
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property bounceWebhooksEnabled (base name: "bounce.webhooks_enabled")', function() {
      // uncomment below and update the code to test the property bounceWebhooksEnabled
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property bounceCount (base name: "bounce.count")', function() {
      // uncomment below and update the code to test the property bounceCount
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property bounceAction (base name: "bounce.action")', function() {
      // uncomment below and update the code to test the property bounceAction
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property bounceSesEnabled (base name: "bounce.ses_enabled")', function() {
      // uncomment below and update the code to test the property bounceSesEnabled
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property bounceSendgridEnabled (base name: "bounce.sendgrid_enabled")', function() {
      // uncomment below and update the code to test the property bounceSendgridEnabled
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property bounceSendgridKey (base name: "bounce.sendgrid_key")', function() {
      // uncomment below and update the code to test the property bounceSendgridKey
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property bounceMailboxes (base name: "bounce.mailboxes")', function() {
      // uncomment below and update the code to test the property bounceMailboxes
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appearanceAdminCustomCss (base name: "appearance.admin.custom_css")', function() {
      // uncomment below and update the code to test the property appearanceAdminCustomCss
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appearanceAdminCustomJs (base name: "appearance.admin.custom_js")', function() {
      // uncomment below and update the code to test the property appearanceAdminCustomJs
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appearancePublicCustomCss (base name: "appearance.public.custom_css")', function() {
      // uncomment below and update the code to test the property appearancePublicCustomCss
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

    it('should have the property appearancePublicCustomJs (base name: "appearance.public.custom_js")', function() {
      // uncomment below and update the code to test the property appearancePublicCustomJs
      //var instance = new Listmonk.SettingsData();
      //expect(instance).to.be();
    });

  });

}));
