/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServerConfigDataLangsInner from './ServerConfigDataLangsInner';

/**
 * The ServerConfigData model module.
 * @module model/ServerConfigData
 * @version 1.0.0
 */
class ServerConfigData {
    /**
     * Constructs a new <code>ServerConfigData</code>.
     * @alias module:model/ServerConfigData
     */
    constructor() { 
        
        ServerConfigData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServerConfigData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerConfigData} obj Optional instance to populate.
     * @return {module:model/ServerConfigData} The populated <code>ServerConfigData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerConfigData();

            if (data.hasOwnProperty('messengers')) {
                obj['messengers'] = ApiClient.convertToType(data['messengers'], ['String']);
            }
            if (data.hasOwnProperty('langs')) {
                obj['langs'] = ApiClient.convertToType(data['langs'], [ServerConfigDataLangsInner]);
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('update')) {
                obj['update'] = ApiClient.convertToType(data['update'], 'String');
            }
            if (data.hasOwnProperty('needs_restart')) {
                obj['needs_restart'] = ApiClient.convertToType(data['needs_restart'], 'Boolean');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerConfigData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerConfigData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['messengers'])) {
            throw new Error("Expected the field `messengers` to be an array in the JSON data but got " + data['messengers']);
        }
        if (data['langs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['langs'])) {
                throw new Error("Expected the field `langs` to be an array in the JSON data but got " + data['langs']);
            }
            // validate the optional field `langs` (array)
            for (const item of data['langs']) {
                ServerConfigDataLangsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['update'] && !(typeof data['update'] === 'string' || data['update'] instanceof String)) {
            throw new Error("Expected the field `update` to be a primitive type in the JSON string but got " + data['update']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} messengers
 */
ServerConfigData.prototype['messengers'] = undefined;

/**
 * @member {Array.<module:model/ServerConfigDataLangsInner>} langs
 */
ServerConfigData.prototype['langs'] = undefined;

/**
 * @member {String} lang
 */
ServerConfigData.prototype['lang'] = undefined;

/**
 * @member {String} update
 */
ServerConfigData.prototype['update'] = undefined;

/**
 * @member {Boolean} needs_restart
 */
ServerConfigData.prototype['needs_restart'] = undefined;

/**
 * @member {String} version
 */
ServerConfigData.prototype['version'] = undefined;






export default ServerConfigData;

