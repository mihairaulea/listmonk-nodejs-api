/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SMTPSettings model module.
 * @module model/SMTPSettings
 * @version 1.0.0
 */
class SMTPSettings {
    /**
     * Constructs a new <code>SMTPSettings</code>.
     * @alias module:model/SMTPSettings
     */
    constructor() { 
        
        SMTPSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SMTPSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SMTPSettings} obj Optional instance to populate.
     * @return {module:model/SMTPSettings} The populated <code>SMTPSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SMTPSettings();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('hello_hostname')) {
                obj['hello_hostname'] = ApiClient.convertToType(data['hello_hostname'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('auth_protocol')) {
                obj['auth_protocol'] = ApiClient.convertToType(data['auth_protocol'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('email_headers')) {
                obj['email_headers'] = ApiClient.convertToType(data['email_headers'], [Object]);
            }
            if (data.hasOwnProperty('max_conns')) {
                obj['max_conns'] = ApiClient.convertToType(data['max_conns'], 'Number');
            }
            if (data.hasOwnProperty('max_msg_retries')) {
                obj['max_msg_retries'] = ApiClient.convertToType(data['max_msg_retries'], 'Number');
            }
            if (data.hasOwnProperty('idle_timeout')) {
                obj['idle_timeout'] = ApiClient.convertToType(data['idle_timeout'], 'String');
            }
            if (data.hasOwnProperty('wait_timeout')) {
                obj['wait_timeout'] = ApiClient.convertToType(data['wait_timeout'], 'String');
            }
            if (data.hasOwnProperty('tls_type')) {
                obj['tls_type'] = ApiClient.convertToType(data['tls_type'], 'String');
            }
            if (data.hasOwnProperty('tls_skip_verify')) {
                obj['tls_skip_verify'] = ApiClient.convertToType(data['tls_skip_verify'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SMTPSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SMTPSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['hello_hostname'] && !(typeof data['hello_hostname'] === 'string' || data['hello_hostname'] instanceof String)) {
            throw new Error("Expected the field `hello_hostname` to be a primitive type in the JSON string but got " + data['hello_hostname']);
        }
        // ensure the json data is a string
        if (data['auth_protocol'] && !(typeof data['auth_protocol'] === 'string' || data['auth_protocol'] instanceof String)) {
            throw new Error("Expected the field `auth_protocol` to be a primitive type in the JSON string but got " + data['auth_protocol']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['email_headers'])) {
            throw new Error("Expected the field `email_headers` to be an array in the JSON data but got " + data['email_headers']);
        }
        // ensure the json data is a string
        if (data['idle_timeout'] && !(typeof data['idle_timeout'] === 'string' || data['idle_timeout'] instanceof String)) {
            throw new Error("Expected the field `idle_timeout` to be a primitive type in the JSON string but got " + data['idle_timeout']);
        }
        // ensure the json data is a string
        if (data['wait_timeout'] && !(typeof data['wait_timeout'] === 'string' || data['wait_timeout'] instanceof String)) {
            throw new Error("Expected the field `wait_timeout` to be a primitive type in the JSON string but got " + data['wait_timeout']);
        }
        // ensure the json data is a string
        if (data['tls_type'] && !(typeof data['tls_type'] === 'string' || data['tls_type'] instanceof String)) {
            throw new Error("Expected the field `tls_type` to be a primitive type in the JSON string but got " + data['tls_type']);
        }

        return true;
    }


}



/**
 * @member {String} uuid
 */
SMTPSettings.prototype['uuid'] = undefined;

/**
 * @member {Boolean} enabled
 */
SMTPSettings.prototype['enabled'] = undefined;

/**
 * @member {String} host
 */
SMTPSettings.prototype['host'] = undefined;

/**
 * @member {String} hello_hostname
 */
SMTPSettings.prototype['hello_hostname'] = undefined;

/**
 * @member {Number} port
 */
SMTPSettings.prototype['port'] = undefined;

/**
 * @member {String} auth_protocol
 */
SMTPSettings.prototype['auth_protocol'] = undefined;

/**
 * @member {String} username
 */
SMTPSettings.prototype['username'] = undefined;

/**
 * @member {Array.<Object>} email_headers
 */
SMTPSettings.prototype['email_headers'] = undefined;

/**
 * @member {Number} max_conns
 */
SMTPSettings.prototype['max_conns'] = undefined;

/**
 * @member {Number} max_msg_retries
 */
SMTPSettings.prototype['max_msg_retries'] = undefined;

/**
 * @member {String} idle_timeout
 */
SMTPSettings.prototype['idle_timeout'] = undefined;

/**
 * @member {String} wait_timeout
 */
SMTPSettings.prototype['wait_timeout'] = undefined;

/**
 * @member {String} tls_type
 */
SMTPSettings.prototype['tls_type'] = undefined;

/**
 * @member {Boolean} tls_skip_verify
 */
SMTPSettings.prototype['tls_skip_verify'] = undefined;






export default SMTPSettings;

