/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImportStatus from '../model/ImportStatus';
import ImportSubscribersLogsGet200Response from '../model/ImportSubscribersLogsGet200Response';
import ImportSubscribersPostRequest from '../model/ImportSubscribersPostRequest';

/**
* Import service.
* @module api/ImportApi
* @version 1.0.0
*/
export default class ImportApi {

    /**
    * Constructs a new ImportApi. 
    * @alias module:api/ImportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the importSubscribersDelete operation.
     * @callback module:api/ImportApi~importSubscribersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sends a stop signal to the importer.
     * @param {module:api/ImportApi~importSubscribersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportStatus}
     */
    importSubscribersDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportStatus;
      return this.apiClient.callApi(
        '/import/subscribers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSubscribersGet operation.
     * @callback module:api/ImportApi~importSubscribersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns import statistics.
     * @param {module:api/ImportApi~importSubscribersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportStatus}
     */
    importSubscribersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportStatus;
      return this.apiClient.callApi(
        '/import/subscribers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSubscribersLogsGet operation.
     * @callback module:api/ImportApi~importSubscribersLogsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportSubscribersLogsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns import statistics
     * @param {module:api/ImportApi~importSubscribersLogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportSubscribersLogsGet200Response}
     */
    importSubscribersLogsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportSubscribersLogsGet200Response;
      return this.apiClient.callApi(
        '/import/subscribers/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSubscribersPost operation.
     * @callback module:api/ImportApi~importSubscribersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles the uploading and bulk importing of a ZIP file of one or more CSV files.
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportSubscribersPostRequest} [importSubscribersPostRequest] 
     * @param {module:api/ImportApi~importSubscribersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportStatus}
     */
    importSubscribersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['importSubscribersPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportStatus;
      return this.apiClient.callApi(
        '/import/subscribers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
