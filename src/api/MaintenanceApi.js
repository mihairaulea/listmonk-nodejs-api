/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HealthGet200Response from '../model/HealthGet200Response';
import MaintenanceSubscribersTypeDelete200Response from '../model/MaintenanceSubscribersTypeDelete200Response';

/**
* Maintenance service.
* @module api/MaintenanceApi
* @version 1.0.0
*/
export default class MaintenanceApi {

    /**
    * Constructs a new MaintenanceApi. 
    * @alias module:api/MaintenanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the maintenanceAnalyticsTypeDelete operation.
     * @callback module:api/MaintenanceApi~maintenanceAnalyticsTypeDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * garbage collects (deletes) campaign analytics.
     * @param {String} type 
     * @param {module:api/MaintenanceApi~maintenanceAnalyticsTypeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    maintenanceAnalyticsTypeDelete(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling maintenanceAnalyticsTypeDelete");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/maintenance/analytics/{type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the maintenanceSubscribersTypeDelete operation.
     * @callback module:api/MaintenanceApi~maintenanceSubscribersTypeDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MaintenanceSubscribersTypeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * garbage collects (deletes) orphaned or blocklisted subscribers.
     * @param {String} type 
     * @param {module:api/MaintenanceApi~maintenanceSubscribersTypeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MaintenanceSubscribersTypeDelete200Response}
     */
    maintenanceSubscribersTypeDelete(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling maintenanceSubscribersTypeDelete");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MaintenanceSubscribersTypeDelete200Response;
      return this.apiClient.callApi(
        '/maintenance/subscribers/{type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the maintenanceSubscriptionsUnconfirmedDelete operation.
     * @callback module:api/MaintenanceApi~maintenanceSubscriptionsUnconfirmedDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * garbage collects (deletes) orphaned or blocklisted subscribers.
     * @param {String} type 
     * @param {module:api/MaintenanceApi~maintenanceSubscriptionsUnconfirmedDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    maintenanceSubscriptionsUnconfirmedDelete(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling maintenanceSubscriptionsUnconfirmedDelete");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/maintenance/subscriptions/unconfirmed', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
