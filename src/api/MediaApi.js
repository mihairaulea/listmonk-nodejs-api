/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HealthGet200Response from '../model/HealthGet200Response';
import MediaFileObject from '../model/MediaFileObject';
import MediaGet200Response from '../model/MediaGet200Response';

/**
* Media service.
* @module api/MediaApi
* @version 1.0.0
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mediaGet operation.
     * @callback module:api/MediaApi~mediaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles retrieval of uploaded media.
     * @param {module:api/MediaApi~mediaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaGet200Response}
     */
    mediaGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaGet200Response;
      return this.apiClient.callApi(
        '/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaMediaIdDelete operation.
     * @callback module:api/MediaApi~mediaMediaIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles deletion of uploaded media.
     * @param {Number} mediaId The id value of the list you want to delete.
     * @param {module:api/MediaApi~mediaMediaIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    mediaMediaIdDelete(mediaId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling mediaMediaIdDelete");
      }

      let pathParams = {
        'media_id': mediaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/media/{media_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaMediaIdGet operation.
     * @callback module:api/MediaApi~mediaMediaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaFileObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles retrieval of uploaded media.
     * @param {Number} id media file id
     * @param {module:api/MediaApi~mediaMediaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaFileObject}
     */
    mediaMediaIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediaMediaIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaFileObject;
      return this.apiClient.callApi(
        '/media/{media_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaPost operation.
     * @callback module:api/MediaApi~mediaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaFileObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles media file uploads.
     * @param {module:api/MediaApi~mediaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaFileObject}
     */
    mediaPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MediaFileObject;
      return this.apiClient.callApi(
        '/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
