/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HealthGet200Response from '../model/HealthGet200Response';
import Subscriber from '../model/Subscriber';
import SubscriberData from '../model/SubscriberData';
import SubscriberRegistrationInfo from '../model/SubscriberRegistrationInfo';
import SubscribersGet200Response from '../model/SubscribersGet200Response';
import SubscribersIdBouncesGet200Response from '../model/SubscribersIdBouncesGet200Response';
import SubscribersListsPutRequest from '../model/SubscribersListsPutRequest';

/**
* Subscribers service.
* @module api/SubscribersApi
* @version 1.0.0
*/
export default class SubscribersApi {

    /**
    * Constructs a new SubscribersApi. 
    * @alias module:api/SubscribersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscribersGet operation.
     * @callback module:api/SubscribersApi~subscribersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribersGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all subscribers.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] number of records to skip
     * @param {Number} [perPage] max number of records to return per page
     * @param {module:api/SubscribersApi~subscribersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribersGet200Response}
     */
    subscribersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscribersGet200Response;
      return this.apiClient.callApi(
        '/subscribers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersIdBlocklistPut operation.
     * @callback module:api/SubscribersApi~subscribersIdBlocklistPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles the blocklisting of one or more subscribers.
     * @param {Number} id The id value of the subscriber you want to blocklist.
     * @param {module:api/SubscribersApi~subscribersIdBlocklistPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    subscribersIdBlocklistPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscribersIdBlocklistPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/subscribers/{id}/blocklist', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersIdBouncesDelete operation.
     * @callback module:api/SubscribersApi~subscribersIdBouncesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a subscriber's bounce records
     * @param {Number} id subscriber id
     * @param {module:api/SubscribersApi~subscribersIdBouncesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    subscribersIdBouncesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscribersIdBouncesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/subscribers/{id}/bounces', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersIdBouncesGet operation.
     * @callback module:api/SubscribersApi~subscribersIdBouncesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribersIdBouncesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieves a subscriber's bounce records
     * @param {Number} id subscriber id
     * @param {module:api/SubscribersApi~subscribersIdBouncesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribersIdBouncesGet200Response}
     */
    subscribersIdBouncesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscribersIdBouncesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscribersIdBouncesGet200Response;
      return this.apiClient.callApi(
        '/subscribers/{id}/bounces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersIdDelete operation.
     * @callback module:api/SubscribersApi~subscribersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles subscriber deletion based on id
     * @param {Number} id The id value of the subscriber you want to get.
     * @param {module:api/SubscribersApi~subscribersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    subscribersIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscribersIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/subscribers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersIdExportGet operation.
     * @callback module:api/SubscribersApi~subscribersIdExportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriberData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieves a subscriber's profile
     * @param {Number} id The id value of subscriber profile you want to export
     * @param {module:api/SubscribersApi~subscribersIdExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriberData}
     */
    subscribersIdExportGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscribersIdExportGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriberData;
      return this.apiClient.callApi(
        '/subscribers/{id}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersIdOptinPost operation.
     * @callback module:api/SubscribersApi~subscribersIdOptinPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sends an optin confirmation e-mail to a subscriber.
     * @param {Number} id sends an optin confirmation e-mail to a subscriber
     * @param {module:api/SubscribersApi~subscribersIdOptinPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    subscribersIdOptinPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscribersIdOptinPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/subscribers/{id}/optin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersListsPut operation.
     * @callback module:api/SubscribersApi~subscribersListsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles bulk addition or removal of subscribers
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscribersListsPutRequest} [subscribersListsPutRequest] 
     * @param {module:api/SubscribersApi~subscribersListsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    subscribersListsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['subscribersListsPutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/subscribers/lists', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersPost operation.
     * @callback module:api/SubscribersApi~subscribersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscriber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles creation of new subscriber
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriberRegistrationInfo} [subscriberRegistrationInfo] 
     * @param {module:api/SubscribersApi~subscribersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscriber}
     */
    subscribersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriberRegistrationInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscriber;
      return this.apiClient.callApi(
        '/subscribers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersQueryBlocklistPut operation.
     * @callback module:api/SubscribersApi~subscribersQueryBlocklistPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * bulk blocklists subscribers based on an arbitrary SQL expression.
     * @param {Object} opts Optional parameters
     * @param {String} [body] Arbitrary SQL expression.
     * @param {module:api/SubscribersApi~subscribersQueryBlocklistPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    subscribersQueryBlocklistPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/subscribers/query/blocklist', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersQueryDeletePost operation.
     * @callback module:api/SubscribersApi~subscribersQueryDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * bulk deletes based on an arbitrary SQL expression.
     * @param {Object} opts Optional parameters
     * @param {String} [body] Arbitrary SQL expression.
     * @param {module:api/SubscribersApi~subscribersQueryDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    subscribersQueryDeletePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/subscribers/query/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersQueryListsPut operation.
     * @callback module:api/SubscribersApi~subscribersQueryListsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * bulk adds/removes/unsubscribes subscribers from one or more lists based on an arbitrary SQL expression.
     * @param {Object} opts Optional parameters
     * @param {String} [body] Arbitrary SQL expression.
     * @param {module:api/SubscribersApi~subscribersQueryListsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    subscribersQueryListsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/subscribers/query/lists', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribersSubscriberIdGet operation.
     * @callback module:api/SubscribersApi~subscribersSubscriberIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscriber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles the retrieval of a single subscriber by ID.
     * @param {Number} subscriberId The id value of the subscriber you want to get.
     * @param {module:api/SubscribersApi~subscribersSubscriberIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscriber}
     */
    subscribersSubscriberIdGet(subscriberId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriberId' is set
      if (subscriberId === undefined || subscriberId === null) {
        throw new Error("Missing the required parameter 'subscriberId' when calling subscribersSubscriberIdGet");
      }

      let pathParams = {
        'subscriberId': subscriberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subscriber;
      return this.apiClient.callApi(
        '/subscribers/{subscriberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
