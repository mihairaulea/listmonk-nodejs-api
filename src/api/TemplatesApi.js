/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HealthGet200Response from '../model/HealthGet200Response';
import Template from '../model/Template';
import TemplatesGet200Response from '../model/TemplatesGet200Response';

/**
* Templates service.
* @module api/TemplatesApi
* @version 1.0.0
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the templatesGet operation.
     * @callback module:api/TemplatesApi~templatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplatesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles retrieval of templates
     * @param {module:api/TemplatesApi~templatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplatesGet200Response}
     */
    templatesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplatesGet200Response;
      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesTemplateIdDefaultPut operation.
     * @callback module:api/TemplatesApi~templatesTemplateIdDefaultPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Template} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles template modification.
     * @param {Number} templateId The id value of the template you want to set to the default template.
     * @param {module:api/TemplatesApi~templatesTemplateIdDefaultPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Template}
     */
    templatesTemplateIdDefaultPut(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templatesTemplateIdDefaultPut");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/templates/{template_id}/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesTemplateIdDelete operation.
     * @callback module:api/TemplatesApi~templatesTemplateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles deletion of templates
     * @param {Number} templateId The id value of the template you want to delete.
     * @param {module:api/TemplatesApi~templatesTemplateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    templatesTemplateIdDelete(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templatesTemplateIdDelete");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/templates/{template_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesTemplateIdGet operation.
     * @callback module:api/TemplatesApi~templatesTemplateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Template} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles retrieval of templates
     * @param {Number} templateId The id value of the template you want to get.
     * @param {module:api/TemplatesApi~templatesTemplateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Template}
     */
    templatesTemplateIdGet(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templatesTemplateIdGet");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/templates/{template_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesTemplateIdPreviewGet operation.
     * @callback module:api/TemplatesApi~templatesTemplateIdPreviewGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * renders the HTML preview of a template.
     * @param {Number} templateId The id value of the template you want to get.
     * @param {module:api/TemplatesApi~templatesTemplateIdPreviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    templatesTemplateIdPreviewGet(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templatesTemplateIdPreviewGet");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/templates/{template_id}/preview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
