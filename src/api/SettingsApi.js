/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HealthGet200Response from '../model/HealthGet200Response';
import SMTPTest from '../model/SMTPTest';
import Settings from '../model/Settings';

/**
* Settings service.
* @module api/SettingsApi
* @version 1.0.0
*/
export default class SettingsApi {

    /**
    * Constructs a new SettingsApi. 
    * @alias module:api/SettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the settingsGet operation.
     * @callback module:api/SettingsApi~settingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Settings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns settings from DB
     * @param {module:api/SettingsApi~settingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Settings}
     */
    settingsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Settings;
      return this.apiClient.callApi(
        '/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsPut operation.
     * @callback module:api/SettingsApi~settingsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update settings
     * @param {Object} opts Optional parameters
     * @param {module:model/Settings} [settings] 
     * @param {module:api/SettingsApi~settingsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    settingsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['settings'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsSmtpTestPost operation.
     * @callback module:api/SettingsApi~settingsSmtpTestPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SMTPTest} [sMTPTest] 
     * @param {module:api/SettingsApi~settingsSmtpTestPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    settingsSmtpTestPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['sMTPTest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/settings/smtp/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
