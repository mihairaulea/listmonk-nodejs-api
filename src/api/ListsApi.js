/**
 * Listmonk
 * The API collection for listmonk
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HealthGet200Response from '../model/HealthGet200Response';
import ListRegistrationInfo from '../model/ListRegistrationInfo';
import ListsGet200Response from '../model/ListsGet200Response';
import ListsListIdPutRequest from '../model/ListsListIdPutRequest';

/**
* Lists service.
* @module api/ListsApi
* @version 1.0.0
*/
export default class ListsApi {

    /**
    * Constructs a new ListsApi. 
    * @alias module:api/ListsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listsGet operation.
     * @callback module:api/ListsApi~listsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieves lists with additional metadata like subscriber counts. This may be slow.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Optional string to search a list by name.
     * @param {String} [orderBy] Field to sort results by. name|status|created_at|updated_at
     * @param {String} [order] ASC|DESC Sort by ascending or descending order.
     * @param {Number} [page] Page number for paginated results.
     * @param {Number} [perPage] Results to return per page. Setting this to all skips pagination and returns all results
     * @param {module:api/ListsApi~listsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListsGet200Response}
     */
    listsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'order_by': opts['orderBy'],
        'order': opts['order'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListsGet200Response;
      return this.apiClient.callApi(
        '/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listsListIdDelete operation.
     * @callback module:api/ListsApi~listsListIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles list deletion, either a single one (ID in the URI), or a list.
     * @param {Number} id The id value of the lists you want to de;ete.
     * @param {module:api/ListsApi~listsListIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthGet200Response}
     */
    listsListIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listsListIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthGet200Response;
      return this.apiClient.callApi(
        '/lists/{list_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listsListIdGet operation.
     * @callback module:api/ListsApi~listsListIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieves lists with additional metadata like subscriber counts. This may be slow.
     * @param {Number} listId The id value of the list you want to get.
     * @param {module:api/ListsApi~listsListIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    listsListIdGet(listId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listsListIdGet");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/lists/{list_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listsListIdPut operation.
     * @callback module:api/ListsApi~listsListIdPutCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles list modification
     * @param {Number} listId The id value of the list you want to update
     * @param {Object} opts Optional parameters
     * @param {module:model/ListsListIdPutRequest} [listsListIdPutRequest] 
     * @param {module:api/ListsApi~listsListIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    listsListIdPut(listId, opts, callback) {
      opts = opts || {};
      let postBody = opts['listsListIdPutRequest'];
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listsListIdPut");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/lists/{list_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listsPost operation.
     * @callback module:api/ListsApi~listsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * handles list creation
     * @param {Object} opts Optional parameters
     * @param {module:model/ListRegistrationInfo} [listRegistrationInfo] 
     * @param {module:api/ListsApi~listsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    listsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['listRegistrationInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
